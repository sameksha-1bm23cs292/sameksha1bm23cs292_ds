#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
void append(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* current = *head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}
void display(struct Node* head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return;
    }
    struct Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}
void sortList(struct Node** head) {
    if (*head == NULL) return;
    struct Node* current;
    struct Node* nextNode = NULL;
    int swapped;
    do {
        swapped = 0;
        current = *head;
        while (current->next != nextNode) {
            if (current->data > current->next->data) {
                int temp = current->data;
                current->data = current->next->data;
                current->next->data = temp;
                swapped = 1;
            }
            current = current->next;
        }
        nextNode = current;
    } while (swapped);
}
void reverseList(struct Node** head) {
    struct Node* prev = NULL;
    struct Node* current = *head;
    struct Node* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    *head = prev;
}
struct Node* concatenate(struct Node* head1, struct Node* head2) {
    if (head1 == NULL) return head2;
    if (head2 == NULL) return head1;
    struct Node* current = head1;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = head2;
    return head1;
}
int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    // Create first list
    append(&list1, 30);
    append(&list1, 10);
    append(&list1, 50);
    append(&list1, 20);

    printf("Original List 1:\n");
    display(list1);

    printf("\nSorted List 1:\n");
    sortList(&list1);
    display(list1);

    printf("\nReversed List 1:\n");
    reverseList(&list1);
    display(list1);

    // Create second list
    append(&list2, 70);
    append(&list2, 40);
    append(&list2, 60);

    printf("\nOriginal List 2:\n");
    display(list2);

    printf("\nConcatenated List:\n");
    list1 = concatenate(list1, list2);
    display(list1);

    return 0;
}
